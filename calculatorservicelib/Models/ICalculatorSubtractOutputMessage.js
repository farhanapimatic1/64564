/**
 * CalculatorServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of ICalculatorSubtractOutputMessage
 *
 * @constructor
 */
angular.module('CalculatorServiceLib')
    .factory('ICalculatorSubtractOutputMessage', ['BaseModel', ICalculatorSubtractOutputMessageModel]);

    function ICalculatorSubtractOutputMessageModel(BaseModel) {
        var ICalculatorSubtractOutputMessage = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.parameters = this.getValue(obj.parameters);
        };

        ICalculatorSubtractOutputMessage.prototype = new BaseModel();
        ICalculatorSubtractOutputMessage.prototype.constructor = ICalculatorSubtractOutputMessage;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        ICalculatorSubtractOutputMessage.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'parameters', realName: 'parameters', type: 'SubtractResponse' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        ICalculatorSubtractOutputMessage.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {SubtractResponse}
         */
        ICalculatorSubtractOutputMessage.prototype.getParameters = function () {
            return this.parameters;
        };
    
        /**
         * Setter for Parameters
         * 
         * @param {SubtractResponse} value 
         */
        ICalculatorSubtractOutputMessage.prototype.setParameters = function (value) {
            this.parameters = value;
        };
    
        return ICalculatorSubtractOutputMessage;
    }

}(angular));
