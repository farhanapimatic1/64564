/**
 * CalculatorServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Subtract
 *
 * @constructor
 */
angular.module('CalculatorServiceLib')
    .factory('Subtract', ['BaseModel', SubtractModel]);

    function SubtractModel(BaseModel) {
        var Subtract = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.a = this.getValue(obj.a);
            this.b = this.getValue(obj.b);
        };

        Subtract.prototype = new BaseModel();
        Subtract.prototype.constructor = Subtract;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Subtract.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'a', realName: 'a' },
                { name: 'b', realName: 'b' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Subtract.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int|null}
         */
        Subtract.prototype.getA = function () {
            return this.a;
        };
    
        /**
         * Setter for A
         * 
         * @param {int|null} value 
         */
        Subtract.prototype.setA = function (value) {
            this.a = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int|null}
         */
        Subtract.prototype.getB = function () {
            return this.b;
        };
    
        /**
         * Setter for B
         * 
         * @param {int|null} value 
         */
        Subtract.prototype.setB = function (value) {
            this.b = value;
        };
    
        return Subtract;
    }

}(angular));
