/**
 * AWSECommerceServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of CartClear
 */
class CartClear extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.marketplaceDomain =
          this.constructor.getValue(obj.marketplaceDomain
     || obj.MarketplaceDomain);
        this.aWSAccessKeyId = this.constructor.getValue(obj.aWSAccessKeyId || obj.AWSAccessKeyId);
        this.associateTag = this.constructor.getValue(obj.associateTag || obj.AssociateTag);
        this.validate = this.constructor.getValue(obj.validate || obj.Validate);
        this.xMLEscaping = this.constructor.getValue(obj.xMLEscaping || obj.XMLEscaping);
        this.shared = this.constructor.getValue(obj.shared || obj.Shared);
        this.request = this.constructor.getValue(obj.request || obj.Request);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'marketplaceDomain', realName: 'MarketplaceDomain' },
            { name: 'aWSAccessKeyId', realName: 'AWSAccessKeyId' },
            { name: 'associateTag', realName: 'AssociateTag' },
            { name: 'validate', realName: 'Validate' },
            { name: 'xMLEscaping', realName: 'XMLEscaping' },
            { name: 'shared', realName: 'Shared', type: 'CartClearRequest' },
            { name: 'request', realName: 'Request', array: true, type: 'CartClearRequest' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = CartClear;
