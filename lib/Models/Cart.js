/**
 * AWSECommerceServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of Cart
 */
class Cart extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.cartId = this.constructor.getValue(obj.cartId || obj.CartId);
        this.hMAC = this.constructor.getValue(obj.hMAC || obj.HMAC);
        this.uRLEncodedHMAC = this.constructor.getValue(obj.uRLEncodedHMAC || obj.URLEncodedHMAC);
        this.request = this.constructor.getValue(obj.request || obj.Request);
        this.purchaseURL = this.constructor.getValue(obj.purchaseURL || obj.PurchaseURL);
        this.mobileCartURL = this.constructor.getValue(obj.mobileCartURL || obj.MobileCartURL);
        this.subTotal = this.constructor.getValue(obj.subTotal || obj.SubTotal);
        this.cartItems = this.constructor.getValue(obj.cartItems || obj.CartItems);
        this.savedForLaterItems =
          this.constructor.getValue(obj.savedForLaterItems
     || obj.SavedForLaterItems);
        this.similarProducts =
          this.constructor.getValue(obj.similarProducts
     || obj.SimilarProducts);
        this.topSellers = this.constructor.getValue(obj.topSellers || obj.TopSellers);
        this.newReleases = this.constructor.getValue(obj.newReleases || obj.NewReleases);
        this.similarViewedProducts =
          this.constructor.getValue(obj.similarViewedProducts
     || obj.SimilarViewedProducts);
        this.otherCategoriesSimilarProducts =
          this.constructor.getValue(obj.otherCategoriesSimilarProducts
     || obj.OtherCategoriesSimilarProducts);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'cartId', realName: 'CartId' },
            { name: 'hMAC', realName: 'HMAC' },
            { name: 'uRLEncodedHMAC', realName: 'URLEncodedHMAC' },
            { name: 'request', realName: 'Request', type: 'Request162' },
            { name: 'purchaseURL', realName: 'PurchaseURL' },
            { name: 'mobileCartURL', realName: 'MobileCartURL' },
            { name: 'subTotal', realName: 'SubTotal', type: 'Price' },
            { name: 'cartItems', realName: 'CartItems', type: 'CartItems' },
            {
                name: 'savedForLaterItems',
                realName: 'SavedForLaterItems',
                type: 'SavedForLaterItems',
            },
            { name: 'similarProducts', realName: 'SimilarProducts', type: 'SimilarProducts' },
            { name: 'topSellers', realName: 'TopSellers', type: 'TopSellers' },
            { name: 'newReleases', realName: 'NewReleases', type: 'NewReleases' },
            {
                name: 'similarViewedProducts',
                realName: 'SimilarViewedProducts',
                type: 'SimilarViewedProducts',
            },
            {
                name: 'otherCategoriesSimilarProducts',
                realName: 'OtherCategoriesSimilarProducts',
                type: 'OtherCategoriesSimilarProducts',
            },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = Cart;
