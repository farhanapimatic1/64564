/**
 * AWSECommerceServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of Item133
 */
class Item133 extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.aSIN = this.constructor.getValue(obj.aSIN || obj.ASIN);
        this.parentASIN = this.constructor.getValue(obj.parentASIN || obj.ParentASIN);
        this.errors = this.constructor.getValue(obj.errors || obj.Errors);
        this.detailPageURL = this.constructor.getValue(obj.detailPageURL || obj.DetailPageURL);
        this.itemLinks = this.constructor.getValue(obj.itemLinks || obj.ItemLinks);
        this.salesRank = this.constructor.getValue(obj.salesRank || obj.SalesRank);
        this.smallImage = this.constructor.getValue(obj.smallImage || obj.SmallImage);
        this.mediumImage = this.constructor.getValue(obj.mediumImage || obj.MediumImage);
        this.largeImage = this.constructor.getValue(obj.largeImage || obj.LargeImage);
        this.imageSets = this.constructor.getValue(obj.imageSets || obj.ImageSets);
        this.itemAttributes = this.constructor.getValue(obj.itemAttributes || obj.ItemAttributes);
        this.variationAttributes =
          this.constructor.getValue(obj.variationAttributes
     || obj.VariationAttributes);
        this.relatedItems = this.constructor.getValue(obj.relatedItems || obj.RelatedItems);
        this.collections = this.constructor.getValue(obj.collections || obj.Collections);
        this.subjects = this.constructor.getValue(obj.subjects || obj.Subjects);
        this.offerSummary = this.constructor.getValue(obj.offerSummary || obj.OfferSummary);
        this.offers = this.constructor.getValue(obj.offers || obj.Offers);
        this.rentalOffers = this.constructor.getValue(obj.rentalOffers || obj.RentalOffers);
        this.variationSummary =
          this.constructor.getValue(obj.variationSummary
     || obj.VariationSummary);
        this.variations = this.constructor.getValue(obj.variations || obj.Variations);
        this.customerReviews =
          this.constructor.getValue(obj.customerReviews
     || obj.CustomerReviews);
        this.editorialReviews =
          this.constructor.getValue(obj.editorialReviews
     || obj.EditorialReviews);
        this.similarProducts =
          this.constructor.getValue(obj.similarProducts
     || obj.SimilarProducts);
        this.accessories = this.constructor.getValue(obj.accessories || obj.Accessories);
        this.tracks = this.constructor.getValue(obj.tracks || obj.Tracks);
        this.browseNodes = this.constructor.getValue(obj.browseNodes || obj.BrowseNodes);
        this.alternateVersions =
          this.constructor.getValue(obj.alternateVersions
     || obj.AlternateVersions);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'aSIN', realName: 'ASIN' },
            { name: 'parentASIN', realName: 'ParentASIN' },
            { name: 'errors', realName: 'Errors', type: 'Errors' },
            { name: 'detailPageURL', realName: 'DetailPageURL' },
            { name: 'itemLinks', realName: 'ItemLinks', type: 'ItemLinks' },
            { name: 'salesRank', realName: 'SalesRank' },
            { name: 'smallImage', realName: 'SmallImage', type: 'Image' },
            { name: 'mediumImage', realName: 'MediumImage', type: 'Image' },
            { name: 'largeImage', realName: 'LargeImage', type: 'Image' },
            { name: 'imageSets', realName: 'ImageSets', array: true, type: 'ImageSets' },
            { name: 'itemAttributes', realName: 'ItemAttributes', type: 'ItemAttributes' },
            {
                name: 'variationAttributes',
                realName: 'VariationAttributes',
                type: 'VariationAttributes',
            },
            { name: 'relatedItems', realName: 'RelatedItems', array: true, type: 'RelatedItems' },
            { name: 'collections', realName: 'Collections', type: 'Collections' },
            { name: 'subjects', realName: 'Subjects', type: 'Subjects' },
            { name: 'offerSummary', realName: 'OfferSummary', type: 'OfferSummary' },
            { name: 'offers', realName: 'Offers', type: 'Offers' },
            { name: 'rentalOffers', realName: 'RentalOffers', type: 'RentalOffers' },
            { name: 'variationSummary', realName: 'VariationSummary', type: 'VariationSummary' },
            { name: 'variations', realName: 'Variations', type: 'Variations' },
            { name: 'customerReviews', realName: 'CustomerReviews', type: 'CustomerReviews' },
            { name: 'editorialReviews', realName: 'EditorialReviews', type: 'EditorialReviews' },
            { name: 'similarProducts', realName: 'SimilarProducts', type: 'SimilarProducts' },
            { name: 'accessories', realName: 'Accessories', type: 'Accessories' },
            { name: 'tracks', realName: 'Tracks', type: 'Tracks' },
            { name: 'browseNodes', realName: 'BrowseNodes', type: 'BrowseNodes' },
            { name: 'alternateVersions', realName: 'AlternateVersions', type: 'AlternateVersions' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = Item133;
