/**
 * AWSECommerceServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of ItemAttributes
 */
class ItemAttributes extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.actor = this.constructor.getValue(obj.actor || obj.Actor);
        this.artist = this.constructor.getValue(obj.artist || obj.Artist);
        this.aspectRatio = this.constructor.getValue(obj.aspectRatio || obj.AspectRatio);
        this.audienceRating = this.constructor.getValue(obj.audienceRating || obj.AudienceRating);
        this.audioFormat = this.constructor.getValue(obj.audioFormat || obj.AudioFormat);
        this.author = this.constructor.getValue(obj.author || obj.Author);
        this.binding = this.constructor.getValue(obj.binding || obj.Binding);
        this.brand = this.constructor.getValue(obj.brand || obj.Brand);
        this.catalogNumberList =
          this.constructor.getValue(obj.catalogNumberList
     || obj.CatalogNumberList);
        this.category = this.constructor.getValue(obj.category || obj.Category);
        this.cEROAgeRating = this.constructor.getValue(obj.cEROAgeRating || obj.CEROAgeRating);
        this.clothingSize = this.constructor.getValue(obj.clothingSize || obj.ClothingSize);
        this.color = this.constructor.getValue(obj.color || obj.Color);
        this.creator = this.constructor.getValue(obj.creator || obj.Creator);
        this.department = this.constructor.getValue(obj.department || obj.Department);
        this.director = this.constructor.getValue(obj.director || obj.Director);
        this.eAN = this.constructor.getValue(obj.eAN || obj.EAN);
        this.eANList = this.constructor.getValue(obj.eANList || obj.EANList);
        this.edition = this.constructor.getValue(obj.edition || obj.Edition);
        this.eISBN = this.constructor.getValue(obj.eISBN || obj.EISBN);
        this.energyEfficiencyClass =
          this.constructor.getValue(obj.energyEfficiencyClass
     || obj.EnergyEfficiencyClass);
        this.episodeSequence =
          this.constructor.getValue(obj.episodeSequence
     || obj.EpisodeSequence);
        this.eSRBAgeRating = this.constructor.getValue(obj.eSRBAgeRating || obj.ESRBAgeRating);
        this.feature = this.constructor.getValue(obj.feature || obj.Feature);
        this.format = this.constructor.getValue(obj.format || obj.Format);
        this.genre = this.constructor.getValue(obj.genre || obj.Genre);
        this.hardwarePlatform =
          this.constructor.getValue(obj.hardwarePlatform
     || obj.HardwarePlatform);
        this.hazardousMaterialType =
          this.constructor.getValue(obj.hazardousMaterialType
     || obj.HazardousMaterialType);
        this.isAdultProduct = this.constructor.getValue(obj.isAdultProduct || obj.IsAdultProduct);
        this.isAutographed = this.constructor.getValue(obj.isAutographed || obj.IsAutographed);
        this.iSBN = this.constructor.getValue(obj.iSBN || obj.ISBN);
        this.isEligibleForTradeIn =
          this.constructor.getValue(obj.isEligibleForTradeIn
     || obj.IsEligibleForTradeIn);
        this.isMemorabilia = this.constructor.getValue(obj.isMemorabilia || obj.IsMemorabilia);
        this.issuesPerYear = this.constructor.getValue(obj.issuesPerYear || obj.IssuesPerYear);
        this.itemDimensions = this.constructor.getValue(obj.itemDimensions || obj.ItemDimensions);
        this.itemPartNumber = this.constructor.getValue(obj.itemPartNumber || obj.ItemPartNumber);
        this.label = this.constructor.getValue(obj.label || obj.Label);
        this.languages = this.constructor.getValue(obj.languages || obj.Languages);
        this.legalDisclaimer =
          this.constructor.getValue(obj.legalDisclaimer
     || obj.LegalDisclaimer);
        this.listPrice = this.constructor.getValue(obj.listPrice || obj.ListPrice);
        this.magazineType = this.constructor.getValue(obj.magazineType || obj.MagazineType);
        this.manufacturer = this.constructor.getValue(obj.manufacturer || obj.Manufacturer);
        this.manufacturerMaximumAge =
          this.constructor.getValue(obj.manufacturerMaximumAge
     || obj.ManufacturerMaximumAge);
        this.manufacturerMinimumAge =
          this.constructor.getValue(obj.manufacturerMinimumAge
     || obj.ManufacturerMinimumAge);
        this.manufacturerPartsWarrantyDescription =
          this.constructor.getValue(obj.manufacturerPartsWarrantyDescription
     || obj.ManufacturerPartsWarrantyDescription);
        this.mediaType = this.constructor.getValue(obj.mediaType || obj.MediaType);
        this.model = this.constructor.getValue(obj.model || obj.Model);
        this.modelYear = this.constructor.getValue(obj.modelYear || obj.ModelYear);
        this.mPN = this.constructor.getValue(obj.mPN || obj.MPN);
        this.numberOfDiscs = this.constructor.getValue(obj.numberOfDiscs || obj.NumberOfDiscs);
        this.numberOfIssues = this.constructor.getValue(obj.numberOfIssues || obj.NumberOfIssues);
        this.numberOfItems = this.constructor.getValue(obj.numberOfItems || obj.NumberOfItems);
        this.numberOfPages = this.constructor.getValue(obj.numberOfPages || obj.NumberOfPages);
        this.numberOfTracks = this.constructor.getValue(obj.numberOfTracks || obj.NumberOfTracks);
        this.operatingSystem =
          this.constructor.getValue(obj.operatingSystem
     || obj.OperatingSystem);
        this.packageDimensions =
          this.constructor.getValue(obj.packageDimensions
     || obj.PackageDimensions);
        this.packageQuantity =
          this.constructor.getValue(obj.packageQuantity
     || obj.PackageQuantity);
        this.partNumber = this.constructor.getValue(obj.partNumber || obj.PartNumber);
        this.pictureFormat = this.constructor.getValue(obj.pictureFormat || obj.PictureFormat);
        this.platform = this.constructor.getValue(obj.platform || obj.Platform);
        this.productGroup = this.constructor.getValue(obj.productGroup || obj.ProductGroup);
        this.productTypeName =
          this.constructor.getValue(obj.productTypeName
     || obj.ProductTypeName);
        this.productTypeSubcategory =
          this.constructor.getValue(obj.productTypeSubcategory
     || obj.ProductTypeSubcategory);
        this.publicationDate =
          this.constructor.getValue(obj.publicationDate
     || obj.PublicationDate);
        this.publisher = this.constructor.getValue(obj.publisher || obj.Publisher);
        this.regionCode = this.constructor.getValue(obj.regionCode || obj.RegionCode);
        this.releaseDate = this.constructor.getValue(obj.releaseDate || obj.ReleaseDate);
        this.seasonSequence = this.constructor.getValue(obj.seasonSequence || obj.SeasonSequence);
        this.runningTime = this.constructor.getValue(obj.runningTime || obj.RunningTime);
        this.seikodoProductCode =
          this.constructor.getValue(obj.seikodoProductCode
     || obj.SeikodoProductCode);
        this.size = this.constructor.getValue(obj.size || obj.Size);
        this.sKU = this.constructor.getValue(obj.sKU || obj.SKU);
        this.studio = this.constructor.getValue(obj.studio || obj.Studio);
        this.subscriptionLength =
          this.constructor.getValue(obj.subscriptionLength
     || obj.SubscriptionLength);
        this.title = this.constructor.getValue(obj.title || obj.Title);
        this.trackSequence = this.constructor.getValue(obj.trackSequence || obj.TrackSequence);
        this.tradeInValue = this.constructor.getValue(obj.tradeInValue || obj.TradeInValue);
        this.uPC = this.constructor.getValue(obj.uPC || obj.UPC);
        this.uPCList = this.constructor.getValue(obj.uPCList || obj.UPCList);
        this.warranty = this.constructor.getValue(obj.warranty || obj.Warranty);
        this.wEEETaxValue = this.constructor.getValue(obj.wEEETaxValue || obj.WEEETaxValue);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'actor', realName: 'Actor', array: true },
            { name: 'artist', realName: 'Artist', array: true },
            { name: 'aspectRatio', realName: 'AspectRatio' },
            { name: 'audienceRating', realName: 'AudienceRating' },
            { name: 'audioFormat', realName: 'AudioFormat', array: true },
            { name: 'author', realName: 'Author', array: true },
            { name: 'binding', realName: 'Binding' },
            { name: 'brand', realName: 'Brand' },
            { name: 'catalogNumberList', realName: 'CatalogNumberList', type: 'CatalogNumberList' },
            { name: 'category', realName: 'Category', array: true },
            { name: 'cEROAgeRating', realName: 'CEROAgeRating' },
            { name: 'clothingSize', realName: 'ClothingSize' },
            { name: 'color', realName: 'Color' },
            { name: 'creator', realName: 'Creator', array: true, type: 'Creator' },
            { name: 'department', realName: 'Department' },
            { name: 'director', realName: 'Director', array: true },
            { name: 'eAN', realName: 'EAN' },
            { name: 'eANList', realName: 'EANList', type: 'EANList' },
            { name: 'edition', realName: 'Edition' },
            { name: 'eISBN', realName: 'EISBN', array: true },
            { name: 'energyEfficiencyClass', realName: 'EnergyEfficiencyClass' },
            { name: 'episodeSequence', realName: 'EpisodeSequence' },
            { name: 'eSRBAgeRating', realName: 'ESRBAgeRating' },
            { name: 'feature', realName: 'Feature', array: true },
            { name: 'format', realName: 'Format', array: true },
            { name: 'genre', realName: 'Genre' },
            { name: 'hardwarePlatform', realName: 'HardwarePlatform' },
            { name: 'hazardousMaterialType', realName: 'HazardousMaterialType' },
            { name: 'isAdultProduct', realName: 'IsAdultProduct' },
            { name: 'isAutographed', realName: 'IsAutographed' },
            { name: 'iSBN', realName: 'ISBN' },
            { name: 'isEligibleForTradeIn', realName: 'IsEligibleForTradeIn' },
            { name: 'isMemorabilia', realName: 'IsMemorabilia' },
            { name: 'issuesPerYear', realName: 'IssuesPerYear' },
            { name: 'itemDimensions', realName: 'ItemDimensions', type: 'ItemDimensions' },
            { name: 'itemPartNumber', realName: 'ItemPartNumber' },
            { name: 'label', realName: 'Label' },
            { name: 'languages', realName: 'Languages', type: 'Languages' },
            { name: 'legalDisclaimer', realName: 'LegalDisclaimer' },
            { name: 'listPrice', realName: 'ListPrice', type: 'Price' },
            { name: 'magazineType', realName: 'MagazineType' },
            { name: 'manufacturer', realName: 'Manufacturer' },
            {
                name: 'manufacturerMaximumAge',
                realName: 'ManufacturerMaximumAge',
                type: 'DecimalWithUnits',
            },
            {
                name: 'manufacturerMinimumAge',
                realName: 'ManufacturerMinimumAge',
                type: 'DecimalWithUnits',
            },
            {
                name: 'manufacturerPartsWarrantyDescription',
                realName: 'ManufacturerPartsWarrantyDescription',
            },
            { name: 'mediaType', realName: 'MediaType' },
            { name: 'model', realName: 'Model' },
            { name: 'modelYear', realName: 'ModelYear' },
            { name: 'mPN', realName: 'MPN' },
            { name: 'numberOfDiscs', realName: 'NumberOfDiscs' },
            { name: 'numberOfIssues', realName: 'NumberOfIssues' },
            { name: 'numberOfItems', realName: 'NumberOfItems' },
            { name: 'numberOfPages', realName: 'NumberOfPages' },
            { name: 'numberOfTracks', realName: 'NumberOfTracks' },
            { name: 'operatingSystem', realName: 'OperatingSystem' },
            { name: 'packageDimensions', realName: 'PackageDimensions', type: 'PackageDimensions' },
            { name: 'packageQuantity', realName: 'PackageQuantity' },
            { name: 'partNumber', realName: 'PartNumber' },
            { name: 'pictureFormat', realName: 'PictureFormat', array: true },
            { name: 'platform', realName: 'Platform', array: true },
            { name: 'productGroup', realName: 'ProductGroup' },
            { name: 'productTypeName', realName: 'ProductTypeName' },
            { name: 'productTypeSubcategory', realName: 'ProductTypeSubcategory' },
            { name: 'publicationDate', realName: 'PublicationDate' },
            { name: 'publisher', realName: 'Publisher' },
            { name: 'regionCode', realName: 'RegionCode' },
            { name: 'releaseDate', realName: 'ReleaseDate' },
            { name: 'seasonSequence', realName: 'SeasonSequence' },
            { name: 'runningTime', realName: 'RunningTime', type: 'DecimalWithUnits' },
            { name: 'seikodoProductCode', realName: 'SeikodoProductCode' },
            { name: 'size', realName: 'Size' },
            { name: 'sKU', realName: 'SKU' },
            { name: 'studio', realName: 'Studio' },
            {
                name: 'subscriptionLength',
                realName: 'SubscriptionLength',
                type: 'NonNegativeIntegerWithUnits',
            },
            { name: 'title', realName: 'Title' },
            { name: 'trackSequence', realName: 'TrackSequence' },
            { name: 'tradeInValue', realName: 'TradeInValue', type: 'Price' },
            { name: 'uPC', realName: 'UPC' },
            { name: 'uPCList', realName: 'UPCList', type: 'UPCList' },
            { name: 'warranty', realName: 'Warranty' },
            { name: 'wEEETaxValue', realName: 'WEEETaxValue', type: 'Price' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = ItemAttributes;
