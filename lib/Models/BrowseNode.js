/**
 * AWSECommerceServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of BrowseNode
 */
class BrowseNode extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.browseNodeId = this.constructor.getValue(obj.browseNodeId || obj.BrowseNodeId);
        this.name = this.constructor.getValue(obj.name || obj.Name);
        this.isCategoryRoot = this.constructor.getValue(obj.isCategoryRoot || obj.IsCategoryRoot);
        this.properties = this.constructor.getValue(obj.properties || obj.Properties);
        this.children = this.constructor.getValue(obj.children || obj.Children);
        this.ancestors = this.constructor.getValue(obj.ancestors || obj.Ancestors);
        this.topSellers = this.constructor.getValue(obj.topSellers || obj.TopSellers);
        this.newReleases = this.constructor.getValue(obj.newReleases || obj.NewReleases);
        this.topItemSet = this.constructor.getValue(obj.topItemSet || obj.TopItemSet);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'browseNodeId', realName: 'BrowseNodeId' },
            { name: 'name', realName: 'Name' },
            { name: 'isCategoryRoot', realName: 'IsCategoryRoot' },
            { name: 'properties', realName: 'Properties', type: 'Properties' },
            { name: 'children', realName: 'Children', type: 'Children' },
            { name: 'ancestors', realName: 'Ancestors', type: 'Ancestors' },
            { name: 'topSellers', realName: 'TopSellers', type: 'TopSellers' },
            { name: 'newReleases', realName: 'NewReleases', type: 'NewReleases' },
            { name: 'topItemSet', realName: 'TopItemSet', array: true, type: 'TopItemSet' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = BrowseNode;
