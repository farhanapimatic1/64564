/**
 * AWSECommerceServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of OfferSummary
 */
class OfferSummary extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.lowestNewPrice = this.constructor.getValue(obj.lowestNewPrice || obj.LowestNewPrice);
        this.lowestUsedPrice =
          this.constructor.getValue(obj.lowestUsedPrice
     || obj.LowestUsedPrice);
        this.lowestCollectiblePrice =
          this.constructor.getValue(obj.lowestCollectiblePrice
     || obj.LowestCollectiblePrice);
        this.lowestRefurbishedPrice =
          this.constructor.getValue(obj.lowestRefurbishedPrice
     || obj.LowestRefurbishedPrice);
        this.totalNew = this.constructor.getValue(obj.totalNew || obj.TotalNew);
        this.totalUsed = this.constructor.getValue(obj.totalUsed || obj.TotalUsed);
        this.totalCollectible =
          this.constructor.getValue(obj.totalCollectible
     || obj.TotalCollectible);
        this.totalRefurbished =
          this.constructor.getValue(obj.totalRefurbished
     || obj.TotalRefurbished);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'lowestNewPrice', realName: 'LowestNewPrice', type: 'Price' },
            { name: 'lowestUsedPrice', realName: 'LowestUsedPrice', type: 'Price' },
            { name: 'lowestCollectiblePrice', realName: 'LowestCollectiblePrice', type: 'Price' },
            { name: 'lowestRefurbishedPrice', realName: 'LowestRefurbishedPrice', type: 'Price' },
            { name: 'totalNew', realName: 'TotalNew' },
            { name: 'totalUsed', realName: 'TotalUsed' },
            { name: 'totalCollectible', realName: 'TotalCollectible' },
            { name: 'totalRefurbished', realName: 'TotalRefurbished' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = OfferSummary;
