/**
 * AWSECommerceServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of ImageSet
 */
class ImageSet extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.category = this.constructor.getValue(obj.category || obj.Category);
        this.swatchImage = this.constructor.getValue(obj.swatchImage || obj.SwatchImage);
        this.smallImage = this.constructor.getValue(obj.smallImage || obj.SmallImage);
        this.thumbnailImage = this.constructor.getValue(obj.thumbnailImage || obj.ThumbnailImage);
        this.tinyImage = this.constructor.getValue(obj.tinyImage || obj.TinyImage);
        this.mediumImage = this.constructor.getValue(obj.mediumImage || obj.MediumImage);
        this.largeImage = this.constructor.getValue(obj.largeImage || obj.LargeImage);
        this.hiResImage = this.constructor.getValue(obj.hiResImage || obj.HiResImage);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'category', realName: 'Category' },
            { name: 'swatchImage', realName: 'SwatchImage', type: 'Image' },
            { name: 'smallImage', realName: 'SmallImage', type: 'Image' },
            { name: 'thumbnailImage', realName: 'ThumbnailImage', type: 'Image' },
            { name: 'tinyImage', realName: 'TinyImage', type: 'Image' },
            { name: 'mediumImage', realName: 'MediumImage', type: 'Image' },
            { name: 'largeImage', realName: 'LargeImage', type: 'Image' },
            { name: 'hiResImage', realName: 'HiResImage', type: 'Image' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = ImageSet;
