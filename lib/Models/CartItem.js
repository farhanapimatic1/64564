/**
 * AWSECommerceServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of CartItem
 */
class CartItem extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.cartItemId = this.constructor.getValue(obj.cartItemId || obj.CartItemId);
        this.quantity = this.constructor.getValue(obj.quantity || obj.Quantity);
        this.aSIN = this.constructor.getValue(obj.aSIN || obj.ASIN);
        this.sellerNickname = this.constructor.getValue(obj.sellerNickname || obj.SellerNickname);
        this.title = this.constructor.getValue(obj.title || obj.Title);
        this.productGroup = this.constructor.getValue(obj.productGroup || obj.ProductGroup);
        this.metaData = this.constructor.getValue(obj.metaData || obj.MetaData);
        this.price = this.constructor.getValue(obj.price || obj.Price);
        this.itemTotal = this.constructor.getValue(obj.itemTotal || obj.ItemTotal);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'cartItemId', realName: 'CartItemId' },
            { name: 'quantity', realName: 'Quantity' },
            { name: 'aSIN', realName: 'ASIN' },
            { name: 'sellerNickname', realName: 'SellerNickname' },
            { name: 'title', realName: 'Title' },
            { name: 'productGroup', realName: 'ProductGroup' },
            { name: 'metaData', realName: 'MetaData', type: 'MetaData164' },
            { name: 'price', realName: 'Price', type: 'Price' },
            { name: 'itemTotal', realName: 'ItemTotal', type: 'Price' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = CartItem;
