/**
 * AWSECommerceServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of ItemSearchRequest
 */
class ItemSearchRequest extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.actor = this.constructor.getValue(obj.actor || obj.Actor);
        this.artist = this.constructor.getValue(obj.artist || obj.Artist);
        this.availability = this.constructor.getValue(obj.availability || obj.Availability);
        this.audienceRating = this.constructor.getValue(obj.audienceRating || obj.AudienceRating);
        this.author = this.constructor.getValue(obj.author || obj.Author);
        this.brand = this.constructor.getValue(obj.brand || obj.Brand);
        this.browseNode = this.constructor.getValue(obj.browseNode || obj.BrowseNode);
        this.composer = this.constructor.getValue(obj.composer || obj.Composer);
        this.condition = this.constructor.getValue(obj.condition || obj.Condition);
        this.conductor = this.constructor.getValue(obj.conductor || obj.Conductor);
        this.director = this.constructor.getValue(obj.director || obj.Director);
        this.itemPage = this.constructor.getValue(obj.itemPage || obj.ItemPage);
        this.keywords = this.constructor.getValue(obj.keywords || obj.Keywords);
        this.manufacturer = this.constructor.getValue(obj.manufacturer || obj.Manufacturer);
        this.maximumPrice = this.constructor.getValue(obj.maximumPrice || obj.MaximumPrice);
        this.merchantId = this.constructor.getValue(obj.merchantId || obj.MerchantId);
        this.minimumPrice = this.constructor.getValue(obj.minimumPrice || obj.MinimumPrice);
        this.minPercentageOff =
          this.constructor.getValue(obj.minPercentageOff
     || obj.MinPercentageOff);
        this.musicLabel = this.constructor.getValue(obj.musicLabel || obj.MusicLabel);
        this.orchestra = this.constructor.getValue(obj.orchestra || obj.Orchestra);
        this.power = this.constructor.getValue(obj.power || obj.Power);
        this.publisher = this.constructor.getValue(obj.publisher || obj.Publisher);
        this.relatedItemPage =
          this.constructor.getValue(obj.relatedItemPage
     || obj.RelatedItemPage);
        this.relationshipType =
          this.constructor.getValue(obj.relationshipType
     || obj.RelationshipType);
        this.responseGroup = this.constructor.getValue(obj.responseGroup || obj.ResponseGroup);
        this.searchIndex = this.constructor.getValue(obj.searchIndex || obj.SearchIndex);
        this.sort = this.constructor.getValue(obj.sort || obj.Sort);
        this.title = this.constructor.getValue(obj.title || obj.Title);
        this.releaseDate = this.constructor.getValue(obj.releaseDate || obj.ReleaseDate);
        this.includeReviewsSummary =
          this.constructor.getValue(obj.includeReviewsSummary
     || obj.IncludeReviewsSummary);
        this.truncateReviewsAt =
          this.constructor.getValue(obj.truncateReviewsAt
     || obj.TruncateReviewsAt);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'actor', realName: 'Actor' },
            { name: 'artist', realName: 'Artist' },
            { name: 'availability', realName: 'Availability' },
            { name: 'audienceRating', realName: 'AudienceRating', array: true },
            { name: 'author', realName: 'Author' },
            { name: 'brand', realName: 'Brand' },
            { name: 'browseNode', realName: 'BrowseNode' },
            { name: 'composer', realName: 'Composer' },
            { name: 'condition', realName: 'Condition' },
            { name: 'conductor', realName: 'Conductor' },
            { name: 'director', realName: 'Director' },
            { name: 'itemPage', realName: 'ItemPage' },
            { name: 'keywords', realName: 'Keywords' },
            { name: 'manufacturer', realName: 'Manufacturer' },
            { name: 'maximumPrice', realName: 'MaximumPrice' },
            { name: 'merchantId', realName: 'MerchantId' },
            { name: 'minimumPrice', realName: 'MinimumPrice' },
            { name: 'minPercentageOff', realName: 'MinPercentageOff' },
            { name: 'musicLabel', realName: 'MusicLabel' },
            { name: 'orchestra', realName: 'Orchestra' },
            { name: 'power', realName: 'Power' },
            { name: 'publisher', realName: 'Publisher' },
            { name: 'relatedItemPage', realName: 'RelatedItemPage' },
            { name: 'relationshipType', realName: 'RelationshipType', array: true },
            { name: 'responseGroup', realName: 'ResponseGroup', array: true },
            { name: 'searchIndex', realName: 'SearchIndex' },
            { name: 'sort', realName: 'Sort' },
            { name: 'title', realName: 'Title' },
            { name: 'releaseDate', realName: 'ReleaseDate' },
            { name: 'includeReviewsSummary', realName: 'IncludeReviewsSummary' },
            { name: 'truncateReviewsAt', realName: 'TruncateReviewsAt' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = ItemSearchRequest;
